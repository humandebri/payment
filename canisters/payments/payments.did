// Auto-generated by export_candid at build time. Placeholder for IDE support.
type Principal = text;

type Account = record { owner: principal; subaccount: opt vec nat8 };
type LedgerInfo = record { ledger_id: principal; decimals: nat8 };
type IntentStatus = variant { RequiresApproval; Succeeded; Released; Refunded; Expired };
type PaymentIntent = record {
  id: text;
  merchant: principal;
  payer: opt Account;
  escrow: Account;
  asset: text;
  amount: nat;
  status: IntentStatus;
  created_at: nat64;
  expires_at: nat64;
  metadata: vec record { text; text };
};

type CreateIntentArgs = record {
  asset: text;
  amount: nat;
  expires_at: nat64;
  metadata: vec record { text; text };
};

type Error = variant {
  AssetNotRegistered;
  NotFound;
  InvalidState;
  Expired;
  Unauthorized;
  Other: text;
};

service : {
  register_ledger: (text, principal, nat8) -> (result);
  get_ledger: (text) -> (opt LedgerInfo) query;
  create_intent: (CreateIntentArgs) -> (variant { ok: PaymentIntent; err: Error });
  capture: (text) -> (variant { ok: PaymentIntent; err: Error });
  get_intent: (text) -> (opt PaymentIntent) query;
}

